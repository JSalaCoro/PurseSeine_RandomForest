coord_polar("y" , start=0)+
theme_void()
?hist
7620*1852
7620*1.852
7620/1.852
7620/1852
read.csv('/Users/jsala/ownCloud/GIS/Calculs_historics_vms/OTB/otb_year_vcpe_vmsint/otb_vmsint_vcpe_2021.csv')
d = read.csv('/Users/jsala/ownCloud/GIS/Calculs_historics_vms/OTB/otb_year_vcpe_vmsint/otb_vmsint_vcpe_2021.csv')
rm(list=ls())
d = read.csv('/Users/jsala/ownCloud/GIS/Calculs_historics_vms/OTB/otb_year_vcpe_vmsint/otb_vmsint_vcpe_2021.csv')
d$LPUE_HKE = d$Kg_HKE/d$Ftime
hist(d$LPUE_HKE)
hist(d$Kg_HKE)
d$LPUE_DPS= d$Kg_DPS/d$Ftime
d$LPUE_EOI = d$Kg_EOI/d$Ftime
hist(d$LPUE_DPS)
hist(d$LPUE_NEP)
d$LPUE_NEP = d$Kg_NEP/d$Ftime
hist(d$LPUE_NEP)
d$LPUE_ARA = d$Kg_ARA/d$Ftime
write.csv(d, '/Users/jsala/ownCloud/GIS/LIFE-ECOREST/otherLayers/otb_vmsint_vcpe_2021_LPUE.csv')
7630/1852
write.csv(d, '/Users/jsala/ownCloud/GIS/LIFE-ECOREST/otherLayers/otb_vmsint_vcpe_2021_LPUE.csv', dec=',', sep=';')
?write.csv
write.csv(d, '/Users/jsala/ownCloud/GIS/LIFE-ECOREST/otherLayers/otb_vmsint_vcpe_2021_LPUE.csv', dec=',', sep=';')
write.table(d, '/Users/jsala/ownCloud/GIS/LIFE-ECOREST/otherLayers/otb_vmsint_vcpe_2021_LPUE.csv', dec=',', sep=';')
?write.csv
write.table(d, '/Users/jsala/ownCloud/GIS/LIFE-ECOREST/otherLayers/otb_vmsint_vcpe_2021_LPUE.csv', dec='.', sep=';', quote=FALSE)
write.table(d, '/Users/jsala/ownCloud/GIS/LIFE-ECOREST/otherLayers/otb_vmsint_vcpe_2021_LPUE.csv', dec='.', sep=',', quote=FALSE)
write.table(d, '/Users/jsala/ownCloud/GIS/LIFE-ECOREST/otherLayers/otb_vmsint_vcpe_2021_LPUE.csv', dec='.', sep=',', quote=FALSE, row.names = FALSE)
write.table(d, '/Users/jsala/ownCloud/GIS/LIFE-ECOREST/otherLayers/otb_vmsint_vcpe_2021_LPUE.csv', dec='.', sep=';', quote=FALSE, row.names = FALSE)
d
summary(d)
d[is.na(d)] = 0
summary(d)
write.table(d, '/Users/jsala/ownCloud/GIS/LIFE-ECOREST/otherLayers/otb_vmsint_vcpe_2021_LPUE.csv', dec='.', sep=';', quote=FALSE, row.names = FALSE)
0.70*1852
library(ggplot2)
library(RPostgres)
library(tidyr)
library(dplyr)
library(zoo)
rm(list=ls())
drv <- dbDriver("PostgreSQL")
db = 'SAP_Test'
host_db = 'saptest.cmima.csic.es'
db_port = '5432'
db_user = 'joan'
pwd = 'Jo4nSAPO'
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password=pwd)
########Kg and Eu by species
query3 = 'SELECT "Date", "GearMainCode", "Census",  "Region", "Sp", "SpName", sum("Kg") as kg, sum("Eu") as eu from landings."nvMedesp" t1
JOIN vessel ON vessel."Id" = t1."VesselId"
group by "Date", "GearMainCode", "Census", "Region", "Sp", "SpName" order by "GearMainCode", "Date"'
s = dbGetQuery(con, query3)
#by species, GearMainCode and region
ggplot(s %>% filter(Sp == 'VMA', Date > '2020-01-01') %>%
mutate(yearMonth = as.yearmon(Date)) %>%
group_by(yearMonth, GearMainCode, Region) %>% summarize(Kg=sum(kg), Eu=sum(eu)))+
geom_line(aes(x=yearMonth, y=Kg, color=GearMainCode))+
facet_grid(rows=vars(Region))+
theme(legend.position = 'bottom',
axis.text.x = element_text(angle = 90, hjust=1, vjust=0.5, size=10))
rm(list=ls())
db = 'SAP_Test'
host_db = 'saptest.cmima.csic.es'
db_port = '5432'
db_user = 'joan'
pwd='Jo4nSAPO'
conTest <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password = pwd)
library(dplyr)
library(tidyr)
library(scales)
library(ggplot2)
library(RPostgreSQL)
library(ggpubr)
rm(list=ls())
db = 'SAP_Test'
host_db = 'saptest.cmima.csic.es'
db_port = '5432'
db_user = 'joan'
pwd='Jo4nSAPO'
conTest <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password = pwd)
data = dbGetQuery(conTest,
SELECT "GearMainCode" AS "gear_code", "Region" AS "ccaa", "PortName" AS "port",
"TrackCode" AS "track_code", "VesselCode" AS "vessel_code", "Date" AS "date",
"GT" AS "total_gt", "TRB" AS "total_trb", "PowerMain_kW" AS "total_powermain", "PowerAux_kW" AS "total_poweraux"
FROM landings."nvMedesp"
JOIN vessel ON landings."nvMedesp"."VesselId" = vessel."Id"
WHERE "GearMainCode" = 'OTB'
LIMIT 200
)
library(dplyr)
library(tidyr)
library(scales)
library(ggplot2)
library(RPostgreSQL)
library(ggpubr)
rm(list=ls())
db = 'SAP_Test'
host_db = 'saptest.cmima.csic.es'
db_port = '5432'
db_user = 'joan'
pwd='Jo4nSAPO'
conTest <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password = pwd)
db = 'SAP_Test'
host_db = 'saptest.cmima.csic.es'
db_port = '5432'
db_user = 'joan'
pwd='Jo4nSAPO'
conTest <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password = pwd)
query = 'select * from vms."vmsint" where "Code" = \'ESP000025959\' and "Date" between \'2007-01-01\' and \'2007-03-01\''
s = dbGetQuery(conTest, query)
s
query = 'select * from vms."vmsint" where "Code" = \'ESP000025959\' and "Date" between \'2007-01-01\' and \'2007-03-01\' and "P_INT" = 0'
s = dbGetQuery(conTest, query)
s %>% filter(Code, Date, Latitude, Longitude, Speed, Course)
s %>% select(Code, Date, Latitude, Longitude, Speed, Course)
s = s %>% select(Code, Date, Latitude, Longitude, Speed, Course)
s
s$TrackCode = paste0(Code,'_', as.Date(s$Date))
s$TrackCode = paste0(s$Code,'_', as.Date(s$Date))
s
?read.table
s %>% group_by(TrackCode)
s = s %>% filter(Speed > 2 & Speed < 4)
s %>% group_by(TrackCode) %>% summarize(maxDate = max(s$Date))
s %>% group_by(TrackCode) %>% summarize(maxDate = max(s$Date), minDate = min(s$Date))
s %>% group_by(TrackCode) %>% summarize(maxDate = max(s$Date), minDate = min(s$Date))
as.Date('6:06',format='%h:%m')
as.Date('6:06',format='h:mm')
strptime('6:06', format="%H:%M")
?strptime
s %>% group_by(TrackCode) %>% summarize(maxDate = max(s$Date), minDate = min(s$Date))
s %>% group_by(as.dactor(TrackCode)) %>% summarize(maxDate = max(s$Date), minDate = min(s$Date))
s %>% group_by(as.factor(TrackCode)) %>% summarize(maxDate = max(s$Date), minDate = min(s$Date))
strptime("20/2/06 11:16", "%d/%m/%y %H:%M)
s %>% group_by(TrackCode) %>% summarize(maxDate = max(s$Date), minDate = min(s$Date))
strptime("20/2/06 11:16", "%d/%m/%y %H:%M'))
s %>% group_by(TrackCode) %>% summarize(maxDate = max(s$Date), minDate = min(s$Date))
strptime("20/2/06 11:16", "%d/%m/%y %H:%M")
s %>% group_by(TrackCode) %>% summarize(maxDate = max(s$Date), minDate = min(s$Date))
#
s %>% group_by(TrackCode) %>% summarize(maxDate = max(s$Date), minDate = min(s$Date))
#
Ftime = s %>% group_by(TrackCode) %>% summarize(maxDate = max(s$Date), minDate = min(s$Date))
Ftime$FishingTime = Ftime$maxDate - Ftime$minDate
Ftime
#calcular tiempo de pesca:
Ftime = s %>% group_by(TrackCode) %>% summarize(maxDate = max(s$Date), minDate = min(s$Date), Npoint = n())
Ftime
s %>% filter(TrackCode == 'ESP000025959_2007-01-02')
s %>% filter(TrackCode == 'ESP000025959_2007-01-08')
?merge
Ftime$FishingTime = Ftime$maxDate - Ftime$minDate
Ftime$Fpoint = Ftime$FishingTime / Ftime$Npoint
Ftime
Ftime
#juntar las dos tablas:
merge(s , Ftime, by='TrackCode')
#juntar las dos tablas:
finaldf = merge(s , Ftime, by='TrackCode')
library(dplyr)
library(tidyr)
library(scales)
library(ggplot2)
library(RPostgreSQL)
library(ggpubr)
rm(list=ls())
path = 'C:/Users/jsala/ownCloud/Reunions/20240528_ElisaArroyo/'
read.table(paste0(path, 'prueba.txt'))
read.table(paste0(path, 'prueba.txt'), header=TRUE, sep='\t')
d = read.table(paste0(path, 'prueba.txt'), header=TRUE, sep='\t')
d$Date = paste(d$Fecha, d$Hora)
strptime(d$Date, format='%d/%m/%y %H:%M')
d$Date = strptime(d$Date, format='%d/%m/%y %H:%M')
d$TrackCode = paste0(d$CFR, '_', as.Date(d$Date))
d = d %>% filter(Speed > 2 & Speed < 4)
d = d %>% filter(Velocidad > 2 & Velocidad < 4)
#calcular tiempo de pesca:
d %>% group_by(TrackCode) %>% summarize(maxDate = max(s$Date), minDate = min(s$Date), Npoint = n())
#calcular tiempo de pesca:
d %>% group_by(TrackCode) %>% summarize(maxDate = max(Date), minDate = min(Date), Npoint = n())
#calcular tiempo de pesca:
Ftime = d %>% group_by(TrackCode) %>% summarize(maxDate = max(Date), minDate = min(Date), Npoint = n())
Ftime$FishingTime = Ftime$maxDate - Ftime$minDate
Ftime
Ftime$FishingTime = as.numeric(Ftime$FishingTime)
Ftime
Ftime$FishingTime = as.numeric(Ftime$FishingTime)/3600
Ftime
#calcular tiempo de pesca:
Ftime = d %>% group_by(TrackCode) %>% summarize(maxDate = max(Date), minDate = min(Date), Npoint = n())
Ftime$FishingTime = Ftime$maxDate - Ftime$minDate
Ftime$FishingTime = as.numeric(Ftime$FishingTime)/3600
Ftime
Ftime$Fpoint = Ftime$FishingTime / Ftime$Npoint
Ftime
#juntar las dos tablas:
finaldf = merge(s , Ftime, by='TrackCode')
#juntar las dos tablas:
finaldf = merge(d , Ftime, by='TrackCode')
finaldf
library(ggplot2)
library(tidyr)
library(dplyr)
library(zoo)
library(ggpubr)
library(forcats)
library(factoextra)
rm(list=ls())
modelRunning = 'binaryModel'
modelRunning = 'multiClassModel'
d = read.csv(paste0('results/', modelRunning, '/gridSearchCV_results.csv'))
params=list('param_bootstrap', 'param_max_depth', 'param_max_features', 'param_max_leaf_nodes', 'param_max_samples',
'param_min_impurity_decrease', 'param_min_samples_leaf', 'param_min_samples_split', 'param_n_estimators')
for (param in params){
print(param)
ggarrange(
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[[param]])))+ ggtitle(param)
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_recall_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_accuracy_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_f1_score, x=as.factor(d[[param]])))
,
nrow=1)
ggsave(paste0('results/', modelRunning, '/gridSearchCVresultsPlots/', param,'.png'), units='cm', width = 20, height = 10)
}
d = read.csv(paste0('results/', modelRunning, '/gridSearchCV_results.csv'))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d = read.csv(paste0('results/', modelRunning, '/gridSearchCV_results.csv'))
d
summary(d)
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[[param]])))+ ggtitle(param)
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[['min_samples_split']])))+ ggtitle(param)
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[[param]])))+ ggtitle(param)
d[['min_samples_split']]
d[[min_samples_split]]
d[min_samples_split]
d['min_samples_split']
d['param_min_samples_split']
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[min_samples_split])))+ ggtitle(param)
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[param_min_samples_split])))+ ggtitle(param)
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[[param_min_samples_split]])))+ ggtitle(param)
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[param_min_samples_split])))+ ggtitle(param)
d$param_bootstrap
rm(list=ls())
modelRunning = 'binaryModel'
modelRunning = 'multiClassModel'
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d = read.csv(paste0('results/', modelRunning, '/gridSearchCV_results.csv'))
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[param_min_samples_split])))+ ggtitle(param)
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[param_min_samples_split])))
param = 'param_min_impurity_decrease'
ggarrange(
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[[param]])))+ ggtitle(param)
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_recall_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_accuracy_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_f1_score, x=as.factor(d[[param]])))
,
nrow=1)
d = read.csv(paste0('results/', modelRunning, '/gridSearchCV_results.csv'))
param = 'param_max_samples'
ggarrange(
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[[param]])))+ ggtitle(param)
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_recall_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_accuracy_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_f1_score, x=as.factor(d[[param]])))
,
nrow=1)
ggarrange(
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[[param]])))+ ggtitle(param)
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_recall_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_accuracy_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_f1_score, x=as.factor(d[[param]])))
,
nrow=1)
modelRunning = 'multiClassModel'
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d = read.csv(paste0('results/', modelRunning, '/gridSearchCV_results.csv'))
param
ggarrange(
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[[param]])))+ ggtitle(param)
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_recall_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_accuracy_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_f1_score, x=as.factor(d[[param]])))
,
nrow=1)
for (param in params){
print(param)
ggarrange(
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[[param]])))+ ggtitle(param)
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_recall_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_accuracy_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_f1_score, x=as.factor(d[[param]])))
,
nrow=1)
ggsave(paste0('results/', modelRunning, '/gridSearchCVresultsPlots/', param,'.png'), units='cm', width = 20, height = 10)
}
params=list('param_bootstrap', 'param_max_depth', 'param_max_features', 'param_max_leaf_nodes', 'param_max_samples',
'param_min_impurity_decrease', 'param_min_samples_leaf', 'param_min_samples_split', 'param_n_estimators')
for (param in params){
print(param)
ggarrange(
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[[param]])))+ ggtitle(param)
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_recall_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_accuracy_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_f1_score, x=as.factor(d[[param]])))
,
nrow=1)
ggsave(paste0('results/', modelRunning, '/gridSearchCVresultsPlots/', param,'.png'), units='cm', width = 20, height = 10)
}
ggarrange(
ggplot(d)+
geom_violin(aes(y=mean_test_precision_score, x=as.factor(d[[param]])))+ ggtitle(param)
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_recall_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_accuracy_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_f1_score, x=as.factor(d[[param]])))
,
nrow=1)
(ggplot2)
(ggplot2)
(ggplot2)
library(ggplot2)
library(tidyr)
library(dplyr)
library(zoo)
library(ggpubr)
library(forcats)
library(factoextra)
rm(list=ls())
modelRunning = 'binaryModel'
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d = read.csv(paste0('results/', modelRunning, '/gridSearchCV_results.csv'))
params=list('param_bootstrap', 'param_max_depth', 'param_max_features', 'param_max_leaf_nodes', 'param_max_samples',
'param_min_impurity_decrease', 'param_min_samples_leaf', 'param_min_samples_split', 'param_n_estimators')
for (param in params){
print(param)
ggarrange(
ggplot(d)+
geom_violin(aes(y=mean_test_precision_score, x=as.factor(d[[param]])))+ ggtitle(param)
,
ggplot(d)+
geom_violin(aes(y=mean_test_recall_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_violin(aes(y=mean_test_accuracy_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_violin(aes(y=mean_test_f1_score, x=as.factor(d[[param]])))
,
nrow=1)
ggsave(paste0('results/', modelRunning, '/gridSearchCVresultsPlots/', param,'.png'), units='cm', width = 20, height = 10)
}
ggarrange(
ggplot(d)+
geom_violin(aes(y=mean_test_precision_score, x=as.factor(d[[param]])))+ ggtitle(param)
,
ggplot(d)+
geom_violin(aes(y=mean_test_recall_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_violin(aes(y=mean_test_accuracy_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_violin(aes(y=mean_test_f1_score, x=as.factor(d[[param]])))
,
nrow=1)
params=list('param_bootstrap', 'param_max_depth', 'param_max_features', 'param_max_leaf_nodes', 'param_max_samples',
'param_min_impurity_decrease', 'param_min_samples_leaf', 'param_min_samples_split', 'param_n_estimators')
for (param in params){
print(param)
ggarrange(
ggplot(d)+
geom_violin(aes(y=mean_test_precision_score, x=as.factor(d[[param]])))+ ggtitle(param)
,
ggplot(d)+
geom_violin(aes(y=mean_test_recall_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_violin(aes(y=mean_test_accuracy_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_violin(aes(y=mean_test_f1_score, x=as.factor(d[[param]])))
,
nrow=1)
ggsave(paste0('results/', modelRunning, '/gridSearchCVresultsPlots/', param,'.png'), units='cm', width = 20, height = 10)
}
ggarrange(
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[[param]])))+ ggtitle(param)
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_recall_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_accuracy_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_f1_score, x=as.factor(d[[param]])))
,
nrow=1)
modelRunning = 'binaryModel'
d = read.csv(paste0('results/', modelRunning, '/gridSearchCV_results.csv'))
params=list('param_bootstrap', 'param_max_depth', 'param_max_features', 'param_max_leaf_nodes', 'param_max_samples',
'param_min_impurity_decrease', 'param_min_samples_leaf', 'param_min_samples_split', 'param_n_estimators')
ggarrange(
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[[param]])))+ ggtitle(param)
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_recall_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_accuracy_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_f1_score, x=as.factor(d[[param]])))
,
nrow=1)
ggarrange(
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[[param]])))+ ggtitle(param)
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_recall_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_accuracy_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_violin(aes(y=mean_test_f1_score, x=as.factor(d[[param]])))
,
nrow=1)
ggarrange(
ggplot(d)+
geom_boxplot(aes(y=mean_test_precision_score, x=as.factor(d[[param]])))+ ggtitle(param)
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_recall_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_accuracy_score, x=as.factor(d[[param]])))
,
ggplot(d)+
geom_boxplot(aes(y=mean_test_f1_score, x=as.factor(d[[param]])))
,
nrow=1)
